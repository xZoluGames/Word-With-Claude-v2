"""
Ventana principal - Coordinador principal de la aplicaci√≥n
"""

import customtkinter as ctk
from tkinter import messagebox, filedialog
import threading
import os
from datetime import datetime
from PIL import Image
from core.state_manager import state_manager
# Imports de m√≥dulos internos
from core.project_manager import ProjectManager
from core.document_generator import DocumentGenerator
from core.validator import ProjectValidator
from modules.citations import CitationProcessor
from modules.references import ReferenceManager
from modules.sections import SectionManager

# Imports de UI
from .widgets import FontManager, ToolTip, PreviewWindow, ImageManagerDialog
from .tabs import (
    InfoGeneralTab, ContenidoDinamicoTab, CitasReferenciasTab,
    FormatoAvanzadoTab, GeneracionTab
)
from .dialogs import SeccionDialog, HelpDialog
from utils.logger import get_logger
logger = get_logger('MainWindow')
class ProyectoAcademicoGenerator:
    """Clase principal del generador de proyectos acad√©micos"""
    
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("üéì Generador de Proyectos Acad√©micos - Versi√≥n Avanzada")
        self.root.geometry("1200x700")
        self.root.minsize(1000, 600)
        
        # MOVER _init_variables() ANTES de _init_state_manager()
        self._init_variables()  # Mover esta l√≠nea aqu√≠
        self._init_managers()
        self._init_state_manager()  # Ahora puede acceder a formato_config
        self._init_ui_components()
        
        # Configurar ventana y UI
        self.configurar_ventana_responsiva()
        self.configurar_atajos_accesibilidad()
        self.setup_ui()
        self.setup_keyboard_shortcuts()
        
        # Iniciar servicios
        self.mostrar_bienvenida()
        self.actualizar_estadisticas()
        self.project_manager.auto_save_project(self)
    def _init_state_manager(self):
        """Inicializa y configura el gestor de estado centralizado."""
        from utils.logger import get_logger
        logger = get_logger('MainWindow')
        
        # Cargar estado inicial
        initial_state = {
            'formato_config': self.formato_config,
            'secciones_disponibles': self.secciones_disponibles,
            'secciones_activas': self.secciones_activas
        }
        
        state_manager.update_state(**initial_state)
        
        # Suscribir a cambios de estado
        state_manager.subscribe(self._on_state_change)
        
        logger.info("StateManager integrado")

    def _on_state_change(self, new_state):
        """Callback cuando cambia el estado global."""
        # Actualizar UI seg√∫n los cambios
        # Por ejemplo, actualizar estad√≠sticas
        self.actualizar_estadisticas()
    def _init_managers(self):
        """Inicializa los gestores y procesadores"""
        from template_manager import obtener_template_manager
        
        self.template_manager = obtener_template_manager()
        self.project_manager = ProjectManager()
        self.document_generator = DocumentGenerator()
        self.validator = ProjectValidator()
        self.citation_processor = CitationProcessor()
        self.reference_manager = ReferenceManager()
        self.section_manager = SectionManager()
        self.font_manager = FontManager()
    
    def _init_variables(self):
        """Inicializa las variables de la aplicaci√≥n"""
        # Datos del proyecto
        self.proyecto_data = {}
        self.referencias = []
        self.documento_base = None
        self.usar_formato_base = False
        
        # Variables para im√°genes
        self.encabezado_personalizado = None
        self.insignia_personalizada = None
        self.ruta_encabezado = None
        self.ruta_insignia = None
        
        # Configuraci√≥n de marca de agua
        self.watermark_opacity = 0.3
        self.watermark_stretch = True
        self.watermark_mode = 'watermark'
        
        # Secciones din√°micas
        self.secciones_disponibles = self.get_secciones_iniciales()
        self.secciones_activas = list(self.secciones_disponibles.keys())
        self.content_texts = {}
        
        # Configuraci√≥n de formato
        self.formato_config = {
            'fuente_texto': 'Times New Roman',
            'tama√±o_texto': 12,
            'fuente_titulo': 'Times New Roman', 
            'tama√±o_titulo': 14,
            'interlineado': 2.0,
            'margen': 2.54,
            'justificado': True,
            'sangria': True
        }
        
        # Estad√≠sticas
        self.stats = {
            'total_words': 0,
            'total_chars': 0,
            'sections_completed': 0,
            'references_added': 0
        }
        
        # Buscar im√°genes base
        self.buscar_imagenes_base()
    
    def _init_ui_components(self):
        """Inicializa componentes de UI"""
        self.preview_window = PreviewWindow(self)
        self.image_manager = ImageManagerDialog(self)
        self.help_dialog = HelpDialog(self)
    
    def configurar_ventana_responsiva(self):
        """Configura la ventana seg√∫n el tama√±o de pantalla"""
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        
        window_width = max(1000, min(window_width, 1600))
        window_height = max(600, min(window_height, 900))
        
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        if screen_width < 1366:
            self.modo_compacto = True
            self.ajustar_modo_compacto()
        elif screen_width > 1920:
            self.modo_expandido = True
            self.ajustar_modo_expandido()
        else:
            self.modo_compacto = False
            self.modo_expandido = False
    
    def ajustar_modo_compacto(self):
        """Ajusta la interfaz para pantallas peque√±as"""
        self.padding_x = 5
        self.padding_y = 5
        self.font_manager.scale = 0.9
        self.default_entry_height = 30
        self.default_button_height = 35
    
    def ajustar_modo_expandido(self):
        """Ajusta la interfaz para pantallas grandes"""
        self.padding_x = 20
        self.padding_y = 15
        self.font_manager.scale = 1.1
        self.default_entry_height = 40
        self.default_button_height = 45
    
    def configurar_atajos_accesibilidad(self):
        """Configura atajos de teclado para accesibilidad"""
        # Navegaci√≥n entre pesta√±as
        self.root.bind('<Control-Tab>', self.siguiente_pesta√±a)
        self.root.bind('<Control-Shift-Tab>', self.pesta√±a_anterior)
        
        # Zoom de interfaz
        self.root.bind('<Control-plus>', self.aumentar_zoom)
        self.root.bind('<Control-equal>', self.aumentar_zoom)
        self.root.bind('<Control-minus>', self.disminuir_zoom)
        self.root.bind('<Control-0>', self.restablecer_zoom)
        
        # Navegaci√≥n entre secciones
        self.root.bind('<Alt-Up>', lambda e: self.subir_seccion())
        self.root.bind('<Alt-Down>', lambda e: self.bajar_seccion())
        
        # Acceso r√°pido
        self.root.bind('<F1>', lambda e: self.mostrar_instrucciones())
        self.root.bind('<F2>', lambda e: self.ir_a_seccion_actual())
        self.root.bind('<F3>', lambda e: self.buscar_en_contenido())
        self.root.bind('<F4>', lambda e: self.mostrar_preview() if hasattr(self, 'mostrar_preview') else None)
    
    def setup_ui(self):
        """Configura la interfaz de usuario principal"""
        # Frame principal
        main_container = ctk.CTkFrame(self.root, corner_radius=0)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Header
        self._create_header(main_container)
        
        # Content container
        content_container = ctk.CTkFrame(main_container, corner_radius=10)
        content_container.pack(fill="both", expand=True, padx=10, pady=(5, 10))
        
        # Tabview principal
        self.tabview = ctk.CTkTabview(content_container, width=1100, height=520)
        self.tabview.pack(expand=True, fill="both", padx=10, pady=10)
        
        # Crear pesta√±as
        self._create_tabs()
        
        # Agregar men√∫ de accesibilidad
        self._create_accessibility_menu(main_container)
        
        # Agregar tooltips despu√©s de crear widgets
        self.root.after(1000, self.agregar_tooltips)
    
    def _create_header(self, parent):
        """Crea el header con t√≠tulo y botones principales"""
        header_frame = ctk.CTkFrame(parent, height=120, corner_radius=10)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        header_frame.pack_propagate(False)
        
        # T√≠tulo
        self.title_label = ctk.CTkLabel(
            header_frame, 
            text="üéì Generador de Proyectos Acad√©micos",
            font=self.font_manager.get_font("title", "bold")
        )
        self.title_label.pack(pady=(10, 5))
        
        # Botones principales
        self._create_header_buttons(header_frame)
    
    def _create_header_buttons(self, parent):
            """Crea los botones del header"""
            from config.settings import UI_COLORS, BUTTON_COLORS
            button_frame = ctk.CTkFrame(parent, fg_color="transparent")
            button_frame.pack(fill="x", padx=20, pady=(5, 10))
            
            # Primera fila
            btn_row1 = ctk.CTkFrame(button_frame, fg_color="transparent")
            btn_row1.pack(fill="x", pady=(0, 5))
            
            # Botones de la primera fila - corregidos para evitar errores de color
            buttons_row1 = [
                ("üìñ Gu√≠a", self.mostrar_instrucciones, None, None, 80),
                ("üìã Plantilla", self.cargar_documento_base, BUTTON_COLORS['purple'], BUTTON_COLORS['darkpurple'], 90),
                ("üíæ Guardar", self.guardar_proyecto, BUTTON_COLORS['green'], BUTTON_COLORS['darkgreen'], 80),
                ("üìÇ Cargar", self.cargar_proyecto, BUTTON_COLORS['blue'], BUTTON_COLORS['darkblue'], 80)
            ]
            
            for text, command, fg_color, hover_color, width in buttons_row1:
                btn = ctk.CTkButton(
                    btn_row1, text=text, command=command,
                    width=width, height=30, 
                    font=self.font_manager.get_font("small", "bold"),
                    fg_color=fg_color,
                    hover_color=hover_color
                )
                btn.pack(side="left", padx=(0, 5))
            
            # Estad√≠sticas
            self.stats_label = ctk.CTkLabel(
                btn_row1, text="üìä Palabras: 0 | Secciones: 0/13 | Referencias: 0",
                font=self.font_manager.get_font("small"), text_color="gray70"
            )
            self.stats_label.pack(side="right", padx=(5, 0))
            
            # Segunda fila
            btn_row2 = ctk.CTkFrame(button_frame, fg_color="transparent")
            btn_row2.pack(fill="x")
            
            # Botones de la segunda fila - corregidos
            buttons_row2 = [
                ("üñºÔ∏è Im√°genes", self.gestionar_imagenes, BUTTON_COLORS['blue'], BUTTON_COLORS['darkblue'], 90),
                ("üì§ Exportar Config", self.exportar_configuracion, BUTTON_COLORS['orange'], BUTTON_COLORS['darkorange'], 110),
                ("üîç Validar", self.validar_proyecto, BUTTON_COLORS['orange'], BUTTON_COLORS['darkorange'], 80),
                ("üóÇÔ∏è Plantillas", self.gestionar_plantillas, BUTTON_COLORS['indigo'], BUTTON_COLORS['darkindigo'], 90)
            ]
            
            for text, command, fg_color, hover_color, width in buttons_row2:
                btn = ctk.CTkButton(
                    btn_row2, text=text, command=command,
                    width=width, height=30,
                    font=self.font_manager.get_font("small", "bold"),
                    fg_color=fg_color, 
                    hover_color=hover_color
                )
                btn.pack(side="left", padx=(0, 5))
            
            # Bot√≥n generar
            self.generate_btn = ctk.CTkButton(
                btn_row2, text="üìÑ Generar Documento", 
                command=self.generar_documento_async,
                width=140, height=30, 
                font=self.font_manager.get_font("small", "bold"),
                fg_color=BUTTON_COLORS['green'], 
                hover_color=BUTTON_COLORS['darkgreen']
            )
            self.generate_btn.pack(side="right", padx=(5, 0))
            
            # Guardar referencias a botones para tooltips (√≠ndices actualizados)
            self.help_btn = btn_row1.winfo_children()[0]
            self.template_btn = btn_row1.winfo_children()[1]
            self.save_btn = btn_row1.winfo_children()[2]
            self.load_btn = btn_row1.winfo_children()[3]
            self.images_btn = btn_row2.winfo_children()[0]
            self.export_btn = btn_row2.winfo_children()[1]
            self.validate_btn = btn_row2.winfo_children()[2]
            self.plantillas_btn = btn_row2.winfo_children()[3]
    
    def _create_tabs(self):
        """Crea las pesta√±as principales"""
        # Informaci√≥n General
        tab1 = self.tabview.add("üìã Informaci√≥n General")
        self.info_general_tab = InfoGeneralTab(tab1, self)
        
        # Contenido Din√°mico
        tab2 = self.tabview.add("üìù Contenido Din√°mico")
        self.contenido_dinamico_tab = ContenidoDinamicoTab(tab2, self)
        
        # Citas y Referencias
        tab3 = self.tabview.add("üìö Citas y Referencias")
        self.citas_referencias_tab = CitasReferenciasTab(tab3, self)
        
        # Formato Avanzado
        tab4 = self.tabview.add("üé® Formato")
        self.formato_avanzado_tab = FormatoAvanzadoTab(tab4, self)
        
        # Generaci√≥n
        tab5 = self.tabview.add("üîß Generar")
        self.generacion_tab = GeneracionTab(tab5, self)
    
    def _create_accessibility_menu(self, parent):
        """Crea el men√∫ de accesibilidad"""
        # Frame de accesibilidad en el header
        accessibility_frame = ctk.CTkFrame(parent.winfo_children()[0], fg_color="transparent")
        accessibility_frame.pack(side="right", padx=20)
        
        # Indicador de zoom
        self.zoom_label = ctk.CTkLabel(
            accessibility_frame, 
            text=f"üîç {int(self.font_manager.get_current_scale() * 100)}%",
            font=self.font_manager.get_font("small")
        )
        self.zoom_label.pack(side="left", padx=(0, 10))
        
        # Botones de zoom
        zoom_buttons = [
            ("‚ûñ", self.disminuir_zoom, 30),
            ("100%", self.restablecer_zoom, 45),
            ("‚ûï", self.aumentar_zoom, 30)
        ]
        
        for text, command, width in zoom_buttons:
            btn = ctk.CTkButton(
                accessibility_frame, text=text, width=width, height=25,
                command=command,
                font=self.font_manager.get_font("small", "bold" if text in ["‚ûñ", "‚ûï"] else "normal")
            )
            btn.pack(side="left", padx=2)
        
        # Funci√≥n para actualizar indicador
        self.actualizar_indicador_zoom = lambda: self.zoom_label.configure(
            text=f"üîç {int(self.font_manager.get_current_scale() * 100)}%"
        ) if hasattr(self, 'zoom_label') else None
    
    def setup_keyboard_shortcuts(self):
        """Versi√≥n actualizada con undo/redo"""
        shortcuts = {
            '<Control-s>': lambda e: self.guardar_proyecto(),
            '<Control-o>': lambda e: self.cargar_proyecto(),
            '<Control-n>': lambda e: self.nuevo_proyecto(),
            '<Control-z>': lambda e: self.undo(),  # Nuevo
            '<Control-y>': lambda e: self.redo(),  # Nuevo
            '<Control-Shift-z>': lambda e: self.redo(),  # Nuevo (alternativo)
            '<F5>': lambda e: self.validar_proyecto(),
            '<F9>': lambda e: self.generar_documento_async(),
            '<Control-q>': lambda e: self.root.quit()
        }
        
        for key, func in shortcuts.items():
            self.root.bind(key, func)

    def undo(self):
        """Deshace la √∫ltima acci√≥n"""
        state_manager.undo()
        self._sincronizar_con_estado()
        messagebox.showinfo("‚Ü©Ô∏è Deshacer", "Acci√≥n deshecha")

    def redo(self):
        """Rehace la √∫ltima acci√≥n deshecha"""
        state_manager.redo()
        self._sincronizar_con_estado()
        messagebox.showinfo("‚Ü™Ô∏è Rehacer", "Acci√≥n rehecha")

    def _sincronizar_con_estado(self):
        """Sincroniza la UI con el estado actual"""
        current_state = state_manager.get_state()
        
        # Actualizar referencias
        self.referencias = current_state.referencias
        self.actualizar_lista_referencias()
        
        # Actualizar secciones
        self.secciones_disponibles = current_state.secciones_disponibles
        self.secciones_activas = current_state.secciones_activas
        self.actualizar_lista_secciones()
        self.crear_pestanas_contenido()
        
        # Actualizar contenido de secciones
        for seccion_id, contenido in current_state.contenido_secciones.items():
            if seccion_id in self.content_texts:
                self.content_texts[seccion_id].delete("1.0", "end")
                self.content_texts[seccion_id].insert("1.0", contenido)
        
        # Actualizar configuraci√≥n
        self.formato_config = current_state.formato_config
    
    # M√©todos principales delegados
    def guardar_proyecto(self):
        """Delega a ProjectManager"""
        self.project_manager.guardar_proyecto(self)
    
    def cargar_proyecto(self):
        """Delega a ProjectManager"""
        self.project_manager.cargar_proyecto(self)
    
    def nuevo_proyecto(self):
        """Delega a ProjectManager"""
        self.project_manager.nuevo_proyecto(self)
    
    def exportar_configuracion(self):
        """Delega a ProjectManager"""
        self.project_manager.exportar_configuracion(self)
    
    def generar_documento_async(self):
        """Delega a DocumentGenerator"""
        self.document_generator.generar_documento_async(self)
    
    def validar_proyecto(self):
        """Delega a ProjectValidator"""
        self.validator.validar_proyecto(self)
    
    def cargar_documento_base(self):
        """Carga el documento base usando template_manager"""
        from template_manager import aplicar_plantilla_tercer_ano
        aplicar_plantilla_tercer_ano(self)
    
    def gestionar_plantillas(self):
        """Abre el gestor de plantillas avanzado"""
        from template_manager import mostrar_gestor_plantillas
        mostrar_gestor_plantillas(self)
    
    def gestionar_imagenes(self):
        """Abre el gestor de im√°genes"""
        self.image_manager.show()
    
    def mostrar_instrucciones(self):
        """Muestra las instrucciones completas"""
        self.help_dialog.show()
    
    def mostrar_preview(self):
        """Muestra la ventana de vista previa"""
        self.preview_window.show()
    
    # M√©todos de accesibilidad y zoom
    def aumentar_zoom(self, event=None):
        """Aumenta el tama√±o de la interfaz"""
        if self.font_manager.increase_scale():
            self.actualizar_tama√±os_fuente()
            self.actualizar_indicador_zoom()
            self.anunciar_estado(f"Zoom aumentado a {int(self.font_manager.get_current_scale() * 100)}%")
        else:
            messagebox.showinfo("üîç Zoom", "Zoom m√°ximo alcanzado (150%)")
    
    def disminuir_zoom(self, event=None):
        """Disminuye el tama√±o de la interfaz"""
        if self.font_manager.decrease_scale():
            self.actualizar_tama√±os_fuente()
            self.actualizar_indicador_zoom()
            self.anunciar_estado(f"Zoom reducido a {int(self.font_manager.get_current_scale() * 100)}%")
        else:
            messagebox.showinfo("üîç Zoom", "Zoom m√≠nimo alcanzado (70%)")
    
    def restablecer_zoom(self, event=None):
        """Restablece el tama√±o por defecto"""
        self.font_manager.reset_scale()
        self.actualizar_tama√±os_fuente()
        self.actualizar_indicador_zoom()
        self.anunciar_estado("Zoom restablecido a 100%")
    
    def actualizar_tama√±os_fuente(self):
        """Actualiza todos los tama√±os de fuente en la interfaz"""
        # Actualizar elementos principales
        if hasattr(self, 'title_label'):
            self.title_label.configure(font=self.font_manager.get_font("title", "bold"))
        
        if hasattr(self, 'stats_label'):
            self.stats_label.configure(font=self.font_manager.get_font("small"))
        
        # Actualizar pesta√±as actuales
        current_tab = self.tabview.get()
        if current_tab in self.tabview._tab_dict:
            tab_widget = self.tabview.tab(current_tab)
            self._actualizar_fuentes_recursivo(tab_widget)
        
        self.anunciar_estado(f"Zoom: {int(self.font_manager.get_current_scale() * 100)}%")
    
    def _actualizar_fuentes_recursivo(self, widget):
        """Actualiza fuentes recursivamente en widgets hijos"""
        # Implementaci√≥n simplificada
        pass
    
    def anunciar_estado(self, mensaje):
        """Anuncia un mensaje de estado para accesibilidad"""
        if hasattr(self, 'status_label'):
            self.status_label.configure(text=mensaje)
    
    def siguiente_pesta√±a(self, event=None):
        """Navega a la siguiente pesta√±a"""
        tabs = list(self.tabview._tab_dict.keys())
        current = self.tabview.get()
        try:
            current_index = tabs.index(current)
            next_index = (current_index + 1) % len(tabs)
            self.tabview.set(tabs[next_index])
            self.anunciar_estado(f"Navegando a: {tabs[next_index]}")
        except ValueError:
            pass
    
    def pesta√±a_anterior(self, event=None):
        """Navega a la pesta√±a anterior"""
        tabs = list(self.tabview._tab_dict.keys())
        current = self.tabview.get()
        try:
            current_index = tabs.index(current)
            prev_index = (current_index - 1) % len(tabs)
            self.tabview.set(tabs[prev_index])
            self.anunciar_estado(f"Navegando a: {tabs[prev_index]}")
        except ValueError:
            pass
    
    # M√©todos de utilidad
    def buscar_imagenes_base(self):
        """Busca im√°genes base en la carpeta resources/images"""
        try:
            script_dir = os.path.dirname(os.path.abspath(__file__))
            recursos_dir = os.path.join(script_dir, "..", "resources", "images")
            recursos_dir = os.path.normpath(recursos_dir)
            
            print(f"üîç Buscando im√°genes en: {recursos_dir}")
            
            if not os.path.exists(recursos_dir):
                os.makedirs(recursos_dir)
                print(f"üìÅ Directorio creado: {recursos_dir}")
            
            # Buscar encabezado
            encabezado_extensions = ['Encabezado.png', 'Encabezado.jpg', 'Encabezado.jpeg', 'encabezado.png']
            for filename in encabezado_extensions:
                encabezado_path = os.path.join(recursos_dir, filename)
                if os.path.exists(encabezado_path):
                    self.ruta_encabezado = encabezado_path
                    print(f"‚úÖ Encabezado encontrado: {filename}")
                    break
            else:
                print("‚ö†Ô∏è Encabezado.png no encontrado en resources/images")
            
            # Buscar insignia
            insignia_extensions = ['Insignia.png', 'Insignia.jpg', 'Insignia.jpeg', 'insignia.png']
            for filename in insignia_extensions:
                insignia_path = os.path.join(recursos_dir, filename)
                if os.path.exists(insignia_path):
                    self.ruta_insignia = insignia_path
                    print(f"‚úÖ Insignia encontrada: {filename}")
                    break
            else:
                print("‚ö†Ô∏è Insignia.png no encontrada en resources/images")
                
        except Exception as e:
            print(f"‚ùå Error buscando im√°genes base: {e}")
            messagebox.showwarning("‚ö†Ô∏è Im√°genes", 
                f"Error al buscar im√°genes base:\n{str(e)}\n\n"
                f"Coloca las im√°genes en: resources/images/\n"
                f"‚Ä¢ Encabezado.png\n‚Ä¢ Insignia.png")
    
    def get_secciones_iniciales(self):
        """Define las secciones disponibles inicialmente"""
        # [Mantener el contenido original de este m√©todo]
        return {
            "resumen": {
                "titulo": "üìÑ Resumen", 
                "instruccion": "Resumen ejecutivo del proyecto (150-300 palabras)",
                "requerida": False,
                "capitulo": False
            },
            # ... resto de secciones ...
        }
    
    def actualizar_estadisticas(self):
        """Actualiza las estad√≠sticas en tiempo real"""
        total_words = 0
        total_chars = 0
        sections_completed = 0
        
        for key, text_widget in self.content_texts.items():
            if key in self.secciones_disponibles:
                content = text_widget.get("1.0", "end").strip()
                if content and len(content) > 10:
                    sections_completed += 1
                    words = len(content.split())
                    total_words += words
                    total_chars += len(content)
        
        self.stats = {
            'total_words': total_words,
            'total_chars': total_chars,
            'sections_completed': sections_completed,
            'references_added': len(self.referencias)
        }
        
        # Actualizar label
        total_sections = len([s for s in self.secciones_disponibles.values() if not s['capitulo']])
        stats_text = f"üìä Palabras: {total_words} | Secciones: {sections_completed}/{total_sections} | Referencias: {len(self.referencias)}"
        self.stats_label.configure(text=stats_text)
        
        # Programar pr√≥xima actualizaci√≥n
        self.root.after(2000, self.actualizar_estadisticas)
    
    def mostrar_bienvenida(self):
        """Muestra mensaje de bienvenida con atajos de teclado"""
        self.root.after(1000, lambda: messagebox.showinfo(
            "üéì ¬°Generador Profesional!",
            "Generador de Proyectos Acad√©micos - Versi√≥n Profesional\n\n"
            "üÜï CARACTER√çSTICAS AVANZADAS:\n"
            "‚Ä¢ Estructura modular mejorada\n"
            "‚Ä¢ Auto-guardado cada 5 minutos\n"
            "‚Ä¢ Estad√≠sticas en tiempo real\n"
            "‚Ä¢ Sistema de guardado/carga completo\n"
            "‚Ä¢ Gesti√≥n avanzada de im√°genes\n"
            "‚Ä¢ Exportaci√≥n de configuraciones\n\n"
            "‚å®Ô∏è ATAJOS DE TECLADO:\n"
            "‚Ä¢ Ctrl+S: Guardar proyecto\n"
            "‚Ä¢ Ctrl+O: Cargar proyecto\n"
            "‚Ä¢ Ctrl+N: Nuevo proyecto\n"
            "‚Ä¢ F5: Validar proyecto\n"
            "‚Ä¢ F9: Generar documento\n"
            "‚Ä¢ Ctrl+Q: Salir\n\n"
            "üöÄ ¬°Crea proyectos profesionales √∫nicos!"
        ))
    
    def agregar_tooltips(self):
        """Agrega tooltips a los botones principales"""
        # Implementaci√≥n pendiente
        pass
    # Agregar estos m√©todos a la clase ProyectoAcademicoGenerator en ui/main_window.py

    # ========== M√âTODOS DE INTERFAZ DE USUARIO ==========

    def toggle_sidebar(self):
        """Alterna la visibilidad del panel lateral"""
        if hasattr(self, 'sidebar_collapsed') and hasattr(self, 'control_frame'):
            if self.sidebar_collapsed:
                # Expandir
                self.control_frame.pack(side="left", fill="y", padx=(0, 10))
                self.control_frame.configure(width=320)
                # Cambiar icono del bot√≥n
                for widget in self.control_frame.winfo_children():
                    if isinstance(widget, ctk.CTkFrame):
                        for btn in widget.winfo_children():
                            if isinstance(btn, ctk.CTkButton) and btn.cget("text") in ["‚ñ∂", "‚óÄ"]:
                                btn.configure(text="‚óÄ")
                        break
            else:
                # Colapsar
                self.control_frame.pack_forget()
                # O alternativamente, reducir el ancho
                # self.control_frame.configure(width=50)
            
            self.sidebar_collapsed = not self.sidebar_collapsed

    def filtrar_secciones(self, event=None):
        """Filtra las secciones seg√∫n el t√©rmino de b√∫squeda"""
        if hasattr(self, 'search_entry') and hasattr(self, 'secciones_listbox'):
            termino = self.search_entry.get().lower()
            
            # Limpiar lista actual
            for widget in self.secciones_listbox.winfo_children():
                widget.destroy()
            
            # Mostrar solo secciones que coincidan
            for seccion_id in self.secciones_activas:
                if seccion_id in self.secciones_disponibles:
                    seccion = self.secciones_disponibles[seccion_id]
                    titulo = seccion['titulo'].lower()
                    
                    if termino in titulo or termino in seccion_id:
                        self._crear_item_seccion(seccion_id, seccion)

    def _crear_item_seccion(self, seccion_id, seccion):
        """Crea un item visual para la lista de secciones"""
        if hasattr(self, 'secciones_listbox'):
            item_frame = ctk.CTkFrame(self.secciones_listbox, fg_color="gray20", corner_radius=5)
            item_frame.pack(fill="x", padx=5, pady=2)
            
            # Texto de la secci√≥n
            label_text = seccion['titulo']
            if seccion.get('capitulo', False):
                label_text = f"üìÅ {label_text}"
            elif seccion.get('requerida', False):
                label_text = f"‚ö†Ô∏è {label_text}"
            
            label = ctk.CTkLabel(
                item_frame, text=label_text,
                font=ctk.CTkFont(size=11),
                anchor="w"
            )
            label.pack(side="left", padx=10, pady=5, fill="x", expand=True)
            
            # Guardar referencia para selecci√≥n
            item_frame.seccion_id = seccion_id
            item_frame.bind("<Button-1>", lambda e: self._seleccionar_seccion(seccion_id))
    def _seleccionar_seccion(self, seccion_id):
        """Maneja la selecci√≥n de una secci√≥n en la lista"""
        # Buscar la pesta√±a correspondiente
        if seccion_id in self.secciones_disponibles:
            seccion = self.secciones_disponibles[seccion_id]
            if not seccion.get('capitulo', False) and hasattr(self, 'content_tabview'):
                # Buscar y seleccionar la pesta√±a
                for tab_name in self.content_tabview._tab_dict:
                    if tab_name == seccion['titulo']:
                        self.content_tabview.set(tab_name)
                        break
    def _toggle_seccion(self, seccion_id, activa):
        """Activa o desactiva una secci√≥n"""
        if activa and seccion_id not in self.secciones_activas:
            self.secciones_activas.append(seccion_id)
        elif not activa and seccion_id in self.secciones_activas:
            # Verificar si es requerida
            if self.secciones_disponibles[seccion_id].get('requerida', False):
                messagebox.showwarning("‚ö†Ô∏è Secci√≥n Requerida", 
                    "Esta secci√≥n es requerida y no puede ser desactivada")
                # Volver a marcar el checkbox
                return
            self.secciones_activas.remove(seccion_id)
        
        # Actualizar pesta√±as de contenido
        self.crear_pestanas_contenido()

    def actualizar_lista_secciones(self):
        """Actualiza la lista visual de secciones"""
        if hasattr(self, 'secciones_listbox'):
            # Limpiar lista actual
            for widget in self.secciones_listbox.winfo_children():
                widget.destroy()
            
            # Recrear items
            for seccion_id in self.secciones_activas:
                if seccion_id in self.secciones_disponibles:
                    self._crear_item_seccion(seccion_id, self.secciones_disponibles[seccion_id])

    def crear_pestanas_contenido(self):
        """Crea las pesta√±as de contenido din√°micamente"""
        if hasattr(self, 'content_tabview'):
            # Guardar contenido actual antes de recrear
            contenido_temporal = {}
            for seccion_id, text_widget in self.content_texts.items():
                contenido_temporal[seccion_id] = text_widget.get("1.0", "end-1c")
            
            # Limpiar pesta√±as existentes
            for tab in list(self.content_tabview._tab_dict.keys()):
                self.content_tabview.delete(tab)
            
            # Limpiar diccionario de widgets
            self.content_texts.clear()
            
            # Crear nuevas pesta√±as seg√∫n secciones activas
            for seccion_id in self.secciones_activas:
                if seccion_id in self.secciones_disponibles:
                    seccion = self.secciones_disponibles[seccion_id]
                    
                    # No crear pesta√±a para cap√≠tulos (solo son t√≠tulos)
                    if not seccion.get('capitulo', False):
                        tab = self.content_tabview.add(seccion['titulo'])
                        self._crear_contenido_seccion(tab, seccion_id, seccion)
                        
                        # Restaurar contenido si exist√≠a
                        if seccion_id in contenido_temporal and seccion_id in self.content_texts:
                            self.content_texts[seccion_id].insert("1.0", contenido_temporal[seccion_id])
            
            # Actualizar breadcrumb si existe
            if hasattr(self, 'breadcrumb_label'):
                current_tab = self.content_tabview.get() if self.content_tabview._tab_dict else ""
                self.breadcrumb_label.configure(text=f"üìç Navegaci√≥n: {current_tab}")

    def _crear_contenido_seccion(self, parent, seccion_id, seccion):
        """Crea el contenido para una secci√≥n"""
        # Frame contenedor
        section_frame = ctk.CTkFrame(parent, corner_radius=10)
        section_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Header con instrucci√≥n
        header_frame = ctk.CTkFrame(section_frame, fg_color="gray25", height=60)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        header_frame.pack_propagate(False)
        
        instruc_label = ctk.CTkLabel(
            header_frame, text=f"üí° {seccion['instruccion']}",
            font=ctk.CTkFont(size=12),
            wraplength=700, justify="left"
        )
        instruc_label.pack(padx=15, pady=10)
        
        # √Årea de texto
        text_widget = ctk.CTkTextbox(
            section_frame,
            font=ctk.CTkFont(size=12, family="Georgia"),
            wrap="word"
        )
        text_widget.pack(fill="both", expand=True, padx=10, pady=(5, 10))
        
        # Guardar referencia al widget de texto
        self.content_texts[seccion_id] = text_widget
        
        # Barra de herramientas
        self._crear_toolbar_seccion(section_frame, seccion_id, text_widget)
    
    def _crear_toolbar_seccion(self, parent, seccion_id, text_widget):
        """Crea la barra de herramientas para una secci√≥n"""
        toolbar = ctk.CTkFrame(parent, height=40, fg_color="gray20")
        toolbar.pack(fill="x", padx=10, pady=(0, 10))
        
        # Bot√≥n insertar cita (solo para secciones espec√≠ficas)
        if seccion_id in ['marco_teorico', 'introduccion', 'desarrollo', 'discusion']:
            cita_btn = ctk.CTkButton(
                toolbar, text="üìö Insertar Cita",
                command=lambda: self.insertar_cita_dialog(text_widget, seccion_id),
                width=120, height=30
            )
            cita_btn.pack(side="left", padx=5, pady=5)
        
        # Contador de palabras
        word_count = ctk.CTkLabel(
            toolbar, text="Palabras: 0",
            font=ctk.CTkFont(size=11)
        )
        word_count.pack(side="right", padx=10)
        
        # Actualizar contador al escribir
        def update_count(event=None):
            content = text_widget.get("1.0", "end-1c")
            words = len(content.split()) if content.strip() else 0
            word_count.configure(text=f"Palabras: {words}")
        
        text_widget.bind("<KeyRelease>", update_count)
        update_count()  # Actualizar inicialmente

    def insertar_cita_dialog(self, text_widget, seccion_tipo):
        """Abre el di√°logo para insertar citas"""
        from .dialogs import CitationDialog
        
        dialog = CitationDialog(self.root, seccion_tipo)
        self.root.wait_window(dialog.dialog)
        
        if dialog.result:
            # Insertar la cita en la posici√≥n del cursor
            text_widget.insert("insert", dialog.result + " ")

    # ========== M√âTODOS DE GESTI√ìN DE SECCIONES ==========

    def quitar_seccion(self):
        """Quita la secci√≥n seleccionada"""
        # Por ahora, quitar la √∫ltima secci√≥n no requerida
        for i in range(len(self.secciones_activas) - 1, -1, -1):
            seccion_id = self.secciones_activas[i]
            if seccion_id in self.secciones_disponibles:
                seccion = self.secciones_disponibles[seccion_id]
                if not seccion.get('requerida', False) and not seccion.get('capitulo', False):
                    self.secciones_activas.pop(i)
                    self.actualizar_lista_secciones()
                    self.crear_pestanas_contenido()
                    messagebox.showinfo("‚úÖ Eliminada", f"Secci√≥n '{seccion['titulo']}' eliminada")
                    return
        
        messagebox.showwarning("‚ö†Ô∏è Sin secciones", "No hay secciones que se puedan eliminar")

    def editar_seccion(self):
        """Edita una secci√≥n existente"""
        # Obtener la secci√≥n actual
        if hasattr(self, 'content_tabview') and self.content_tabview._tab_dict:
            current_tab = self.content_tabview.get()
            
            # Buscar el ID de la secci√≥n por el t√≠tulo
            seccion_id = None
            for sid, seccion in self.secciones_disponibles.items():
                if seccion['titulo'] == current_tab:
                    seccion_id = sid
                    break
            
            if seccion_id:
                from .dialogs import SeccionDialog
                
                dialog = SeccionDialog(
                    self.root, 
                    self.secciones_disponibles,
                    editar=True,
                    seccion_actual=(seccion_id, self.secciones_disponibles[seccion_id])
                )
                
                self.root.wait_window(dialog.dialog)
                
                if dialog.result:
                    _, seccion_data = dialog.result
                    self.secciones_disponibles[seccion_id].update(seccion_data)
                    self.actualizar_lista_secciones()
                    self.crear_pestanas_contenido()
                    messagebox.showinfo("‚úÖ Actualizada", "Secci√≥n actualizada correctamente")

    def subir_seccion(self):
        """Sube la secci√≥n actual en el orden"""
        if hasattr(self, 'content_tabview') and self.content_tabview._tab_dict:
            current_tab = self.content_tabview.get()
            
            # Buscar el ID de la secci√≥n
            for seccion_id, seccion in self.secciones_disponibles.items():
                if seccion['titulo'] == current_tab:
                    if seccion_id in self.secciones_activas:
                        index = self.secciones_activas.index(seccion_id)
                        if index > 0:
                            # Intercambiar con la anterior
                            self.secciones_activas[index], self.secciones_activas[index-1] = \
                                self.secciones_activas[index-1], self.secciones_activas[index]
                            self.actualizar_lista_secciones()
                            self.crear_pestanas_contenido()
                            # Mantener la pesta√±a actual seleccionada
                            self.content_tabview.set(current_tab)
                    break

    def bajar_seccion(self):
        """Baja la secci√≥n actual en el orden"""
        if hasattr(self, 'content_tabview') and self.content_tabview._tab_dict:
            current_tab = self.content_tabview.get()
            
            # Buscar el ID de la secci√≥n
            for seccion_id, seccion in self.secciones_disponibles.items():
                if seccion['titulo'] == current_tab:
                    if seccion_id in self.secciones_activas:
                        index = self.secciones_activas.index(seccion_id)
                        if index < len(self.secciones_activas) - 1:
                            # Intercambiar con la siguiente
                            self.secciones_activas[index], self.secciones_activas[index+1] = \
                                self.secciones_activas[index+1], self.secciones_activas[index]
                            self.actualizar_lista_secciones()
                            self.crear_pestanas_contenido()
                            # Mantener la pesta√±a actual seleccionada
                            self.content_tabview.set(current_tab)
                    break

    # ========== M√âTODOS DE REFERENCIAS ==========

    def agregar_referencia(self):
        """Agrega una referencia a la lista"""
        # Recopilar datos del formulario
        if all([
            hasattr(self, 'ref_tipo'),
            hasattr(self, 'ref_autor'),
            hasattr(self, 'ref_a√±o'),
            hasattr(self, 'ref_titulo'),
            hasattr(self, 'ref_fuente')
        ]):
            ref_data = {
                'tipo': self.ref_tipo.get(),
                'autor': self.ref_autor.get().strip(),
                'a√±o': self.ref_a√±o.get().strip(),
                'titulo': self.ref_titulo.get().strip(),
                'fuente': self.ref_fuente.get().strip()
            }
            
            # Validar campos requeridos
            if not all([ref_data['autor'], ref_data['a√±o'], ref_data['titulo'], ref_data['fuente']]):
                messagebox.showerror("‚ùå Error", "Todos los campos son obligatorios")
                return
            
            # Agregar a la lista
            self.referencias.append(ref_data)
            
            # Actualizar lista visual
            self.actualizar_lista_referencias()
            
            # Limpiar campos
            self.ref_autor.delete(0, "end")
            self.ref_a√±o.delete(0, "end")
            self.ref_titulo.delete(0, "end")
            self.ref_fuente.delete(0, "end")
            
            # Actualizar contador
            if hasattr(self, 'ref_stats_label'):
                self.ref_stats_label.configure(text=f"Total: {len(self.referencias)} referencias")
            
            messagebox.showinfo("‚úÖ Agregada", "Referencia agregada correctamente")

    def actualizar_lista_referencias(self):
        """Actualiza la lista visual de referencias"""
        if hasattr(self, 'ref_scroll_frame'):
            # Limpiar lista actual
            for widget in self.ref_scroll_frame.winfo_children():
                widget.destroy()
            
            # Mostrar referencias
            for i, ref in enumerate(self.referencias):
                ref_item_frame = ctk.CTkFrame(self.ref_scroll_frame, fg_color="gray20", corner_radius=8)
                ref_item_frame.pack(fill="x", padx=5, pady=5)
                
                # Formatear referencia APA
                if ref['tipo'] == 'Libro':
                    apa_ref = f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}."
                elif ref['tipo'] == 'Web':
                    apa_ref = f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. Recuperado de {ref['fuente']}"
                else:
                    apa_ref = f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}."
                
                ref_label = ctk.CTkLabel(
                    ref_item_frame, text=f"üìñ {apa_ref}", 
                    font=ctk.CTkFont(size=11),
                    wraplength=800, justify="left"
                )
                ref_label.pack(padx=15, pady=10, anchor="w")
                
                # Bot√≥n eliminar individual
                delete_btn = ctk.CTkButton(
                    ref_item_frame, text="üóëÔ∏è", width=30, height=30,
                    command=lambda idx=i: self.eliminar_referencia_individual(idx),
                    fg_color="red", hover_color="darkred"
                )
                delete_btn.pack(side="right", padx=10)

    def eliminar_referencia_individual(self, index):
        """Elimina una referencia espec√≠fica"""
        if 0 <= index < len(self.referencias):
            ref = self.referencias[index]
            respuesta = messagebox.askyesno("üóëÔ∏è Confirmar", 
                f"¬øEliminar esta referencia?\n\n{ref['autor']} ({ref['a√±o']})")
            
            if respuesta:
                self.referencias.pop(index)
                self.actualizar_lista_referencias()
                
                # Actualizar contador
                if hasattr(self, 'ref_stats_label'):
                    self.ref_stats_label.configure(text=f"Total: {len(self.referencias)} referencias")

    def actualizar_campos_referencia(self, tipo_seleccionado):
        """Actualiza los campos del formulario seg√∫n el tipo de referencia"""
        if hasattr(self, 'fuente_label'):
            # Cambiar etiqueta seg√∫n tipo
            if tipo_seleccionado == "Libro":
                self.fuente_label.configure(text="Editorial:")
                self.ref_fuente.configure(placeholder_text="Nombre de la editorial")
            elif tipo_seleccionado == "Art√≠culo":
                self.fuente_label.configure(text="Revista:")
                self.ref_fuente.configure(placeholder_text="Nombre de la revista, volumen(n√∫mero), p√°ginas")
            elif tipo_seleccionado == "Web":
                self.fuente_label.configure(text="URL:")
                self.ref_fuente.configure(placeholder_text="https://www.ejemplo.com")
            elif tipo_seleccionado == "Tesis":
                self.fuente_label.configure(text="Universidad:")
                self.ref_fuente.configure(placeholder_text="Universidad, tipo de tesis")
            elif tipo_seleccionado == "Conferencia":
                self.fuente_label.configure(text="Evento:")
                self.ref_fuente.configure(placeholder_text="Nombre del evento, lugar")
            elif tipo_seleccionado == "Informe":
                self.fuente_label.configure(text="Organizaci√≥n:")
                self.ref_fuente.configure(placeholder_text="Organizaci√≥n que publica")

    # ========== M√âTODOS DE VISTA PREVIA ==========

    def actualizar_preview(self):
        """Actualiza el contenido de la vista previa"""
        if hasattr(self, 'preview_text') and hasattr(self, 'preview_mode'):
            modo = self.preview_mode.get() if hasattr(self.preview_mode, 'get') else "üìù Texto"
            
            self.preview_text.configure(state="normal")
            self.preview_text.delete("1.0", "end")
            
            if modo == "üìù Texto":
                # Vista previa del texto compilado
                preview_content = self.generar_preview_texto()
            elif modo == "üé® Formato":
                # Vista previa con formato aplicado
                preview_content = self.generar_preview_formato()
            elif modo == "üìä Estructura":
                # Vista previa de la estructura
                preview_content = self.generar_preview_estructura()
            else:
                preview_content = "Modo de vista previa no reconocido"
            
            self.preview_text.insert("1.0", preview_content)
            self.preview_text.configure(state="disabled")

    def generar_preview_texto(self):
        """Genera vista previa del texto compilado"""
        preview = []
        
        # T√≠tulo
        if 'titulo' in self.proyecto_data:
            titulo = self.proyecto_data['titulo'].get()
            if titulo:
                preview.append(f"{titulo.upper()}\n")
                preview.append("="*len(titulo) + "\n\n")
        
        # Compilar secciones
        for seccion_id in self.secciones_activas:
            if seccion_id in self.secciones_disponibles and seccion_id in self.content_texts:
                seccion = self.secciones_disponibles[seccion_id]
                contenido = self.content_texts[seccion_id].get("1.0", "end").strip()
                
                if contenido:
                    # Agregar t√≠tulo de secci√≥n
                    titulo_seccion = seccion['titulo'].replace('üìÑ', '').replace('üîç', '').replace('üìñ', '').strip()
                    preview.append(f"\n{titulo_seccion.upper()}\n")
                    preview.append("-"*len(titulo_seccion) + "\n\n")
                    
                    # Agregar contenido
                    preview.append(contenido + "\n")
        
        # Referencias
        if self.referencias:
            preview.append("\n\nREFERENCIAS\n")
            preview.append("-"*11 + "\n\n")
            
            for ref in sorted(self.referencias, key=lambda x: x['autor']):
                if ref['tipo'] == 'Libro':
                    preview.append(f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}.\n\n")
                else:
                    preview.append(f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}.\n\n")
        
        return ''.join(preview) if preview else "No hay contenido para mostrar"

    def generar_preview_estructura(self):
        """Genera vista previa de la estructura del documento"""
        preview = []
        preview.append("üìä ESTRUCTURA DEL DOCUMENTO\n")
        preview.append("="*30 + "\n\n")
        
        # Informaci√≥n general
        preview.append("üìã INFORMACI√ìN GENERAL:\n")
        campos_info = ['institucion', 'titulo', 'estudiantes', 'tutores']
        for campo in campos_info:
            if campo in self.proyecto_data:
                valor = self.proyecto_data[campo].get()
                if valor:
                    preview.append(f"   ‚Ä¢ {campo.title()}: {valor}\n")
        
        preview.append("\nüìë SECCIONES ACTIVAS:\n")
        
        # Estructura de secciones
        num_capitulo = 0
        for i, seccion_id in enumerate(self.secciones_activas, 1):
            if seccion_id in self.secciones_disponibles:
                seccion = self.secciones_disponibles[seccion_id]
                
                if seccion.get('capitulo', False):
                    num_capitulo += 1
                    preview.append(f"\n{seccion['titulo']}\n")
                else:
                    # Contar palabras si existe contenido
                    palabras = 0
                    if seccion_id in self.content_texts:
                        contenido = self.content_texts[seccion_id].get("1.0", "end").strip()
                        if contenido:
                            palabras = len(contenido.split())
                    
                    estado = "‚úÖ" if palabras > 50 else "‚ö†Ô∏è" if palabras > 0 else "‚ùå"
                    preview.append(f"   {estado} {seccion['titulo']} ({palabras} palabras)\n")
        
        # Estad√≠sticas
        preview.append(f"\nüìà ESTAD√çSTICAS:\n")
        preview.append(f"   ‚Ä¢ Total de secciones: {len([s for s in self.secciones_activas if not self.secciones_disponibles.get(s, {}).get('capitulo', False)])}\n")
        preview.append(f"   ‚Ä¢ Referencias agregadas: {len(self.referencias)}\n")
        preview.append(f"   ‚Ä¢ Palabras totales: {self.stats.get('total_words', 0)}\n")
        
        return ''.join(preview)

    # ========== M√âTODOS DE VALIDACI√ìN ==========

    def mostrar_bienvenida_validacion(self):
        """Muestra mensaje de bienvenida en el panel de validaci√≥n"""
        if hasattr(self, 'validation_text'):
            mensaje = """üéØ PANEL DE VALIDACI√ìN Y GENERACI√ìN

    Este panel te ayudar√° a:
    ‚Ä¢ Validar que tu proyecto est√© completo
    ‚Ä¢ Ver estad√≠sticas y an√°lisis
    ‚Ä¢ Revisar logs del sistema
    ‚Ä¢ Obtener sugerencias de mejora

    Presiona 'üîç Validar' en el header principal para comenzar la validaci√≥n.

    OPCIONES DE GENERACI√ìN:
    ‚úì Incluir Portada - P√°gina de presentaci√≥n profesional
    ‚úì Incluir √çndice - Tabla de contenidos autom√°tica
    ‚úì Incluir Agradecimientos - Secci√≥n de agradecimientos
    ‚úì Numeraci√≥n de p√°ginas - N√∫meros de p√°gina autom√°ticos

    Cuando todo est√© listo, presiona 'üìÑ Generar Documento' para crear tu archivo Word.
    """
            self.validation_text.insert("1.0", mensaje)

    def cambiar_tab_validacion(self, valor):
        """Cambia el contenido seg√∫n la pesta√±a de validaci√≥n seleccionada"""
        if hasattr(self, 'validation_text'):
            self.validation_text.delete("1.0", "end")
            
            if valor == "üîç Validaci√≥n":
                self.validar_proyecto()
            elif valor == "üìã Logs":
                self.mostrar_logs()
            elif valor == "üìä Estad√≠sticas":
                self.mostrar_estadisticas()
            elif valor == "üí° Sugerencias":
                self.mostrar_sugerencias()

    def mostrar_estadisticas(self):
        """Muestra estad√≠sticas detalladas del proyecto"""
        stats = []
        stats.append("üìä ESTAD√çSTICAS DETALLADAS DEL PROYECTO\n")
        stats.append("="*50 + "\n\n")
        
        # Estad√≠sticas generales
        stats.append("üìà M√âTRICAS GENERALES:\n")
        stats.append(f"   ‚Ä¢ Palabras totales: {self.stats.get('total_words', 0):,}\n")
        stats.append(f"   ‚Ä¢ Caracteres totales: {self.stats.get('total_chars', 0):,}\n")
        stats.append(f"   ‚Ä¢ Promedio palabras/secci√≥n: {self.stats.get('total_words', 0) // max(1, self.stats.get('sections_completed', 1))}\n\n")
        
        # Por secci√≥n
        stats.append("üìë AN√ÅLISIS POR SECCI√ìN:\n")
        for seccion_id in self.secciones_activas:
            if seccion_id in self.secciones_disponibles and seccion_id in self.content_texts:
                seccion = self.secciones_disponibles[seccion_id]
                if not seccion.get('capitulo', False):
                    contenido = self.content_texts[seccion_id].get("1.0", "end").strip()
                    palabras = len(contenido.split()) if contenido else 0
                    caracteres = len(contenido) if contenido else 0
                    
                    stats.append(f"\n   {seccion['titulo']}:\n")
                    stats.append(f"      - Palabras: {palabras:,}\n")
                    stats.append(f"      - Caracteres: {caracteres:,}\n")
                    stats.append(f"      - Estado: {'‚úÖ Completo' if palabras > 50 else '‚ö†Ô∏è En progreso' if palabras > 0 else '‚ùå Vac√≠o'}\n")
        
        # Referencias
        stats.append(f"\nüìö REFERENCIAS:\n")
        stats.append(f"   ‚Ä¢ Total: {len(self.referencias)}\n")
        
        if self.referencias:
            tipos_ref = {}
            for ref in self.referencias:
                tipo = ref.get('tipo', 'Otro')
                tipos_ref[tipo] = tipos_ref.get(tipo, 0) + 1
            
            for tipo, cantidad in tipos_ref.items():
                stats.append(f"   ‚Ä¢ {tipo}: {cantidad}\n")
        
        self.validation_text.insert("1.0", ''.join(stats))

    # ========== M√âTODOS DE IM√ÅGENES ==========

    def cargar_imagen_personalizada(self, tipo, parent_window=None):
        """Carga una imagen personalizada (encabezado o insignia)"""
        from tkinter import filedialog
        from PIL import Image
        
        filename = filedialog.askopenfilename(
            title=f"Seleccionar {tipo}",
            filetypes=[("Im√°genes", "*.png *.jpg *.jpeg"), ("PNG", "*.png"), ("JPEG", "*.jpg *.jpeg")],
            parent=parent_window
        )
        
        if filename:
            try:
                # Verificar que es una imagen v√°lida
                img = Image.open(filename)
                
                # Redimensionar si es necesario
                if tipo == "encabezado":
                    # Recomendado: 600x100 px
                    if img.width > 800 or img.height > 150:
                        img.thumbnail((800, 150), Image.Resampling.LANCZOS)
                    self.encabezado_personalizado = filename
                    
                    # Actualizar estado en el di√°logo
                    if hasattr(self, 'enc_custom_label'):
                        self.enc_custom_label.configure(text="Encabezado: ‚úÖ Cargado")
                        
                elif tipo == "insignia":
                    # Recomendado: 100x100 px
                    if img.width > 150 or img.height > 150:
                        img.thumbnail((150, 150), Image.Resampling.LANCZOS)
                    self.insignia_personalizada = filename
                    
                    # Actualizar estado en el di√°logo
                    if hasattr(self, 'ins_custom_label'):
                        self.ins_custom_label.configure(text="Insignia: ‚úÖ Cargado")
                
                messagebox.showinfo("‚úÖ Cargado", 
                    f"{tipo.title()} cargado correctamente:\n{os.path.basename(filename)}")
                    
            except Exception as e:
                messagebox.showerror("‚ùå Error", f"Error al cargar imagen:\n{str(e)}")

    def restablecer_imagenes(self, parent_window=None):
        """Restablece las im√°genes a las predeterminadas"""
        respuesta = messagebox.askyesno("üîÑ Restablecer", 
            "¬øRestablecer a las im√°genes base?", parent=parent_window)
        
        if respuesta:
            self.encabezado_personalizado = None
            self.insignia_personalizada = None
            
            # Actualizar estados
            if hasattr(self, 'enc_custom_label'):
                self.enc_custom_label.configure(text="Encabezado: ‚è∏Ô∏è No cargado")
            if hasattr(self, 'ins_custom_label'):
                self.ins_custom_label.configure(text="Insignia: ‚è∏Ô∏è No cargado")
            
            messagebox.showinfo("‚úÖ Restablecido", "Im√°genes restablecidas a las predeterminadas")

    # ========== M√âTODOS AUXILIARES ==========

    def get_secciones_iniciales(self):
        """Define las secciones disponibles inicialmente"""
        return {
            "resumen": {
                "titulo": "üìÑ Resumen", 
                "instruccion": "Resumen ejecutivo del proyecto (150-300 palabras)",
                "requerida": False,
                "capitulo": False
            },
            "introduccion": {
                "titulo": "üîç Introducci√≥n", 
                "instruccion": "Presenta el tema, contexto e importancia",
                "requerida": True,
                "capitulo": False
            },
            "capitulo1": {
                "titulo": "üìñ CAP√çTULO I", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "planteamiento": {
                "titulo": "‚ùì Planteamiento del Problema", 
                "instruccion": "Define el problema a investigar",
                "requerida": True,
                "capitulo": False
            },
            "preguntas": {
                "titulo": "‚ùî Preguntas de Investigaci√≥n", 
                "instruccion": "Pregunta general y espec√≠ficas",
                "requerida": True,
                "capitulo": False
            },
            "delimitaciones": {
                "titulo": "üìè Delimitaciones", 
                "instruccion": "L√≠mites del estudio (temporal, espacial, conceptual)",
                "requerida": False,
                "capitulo": False
            },
            "justificacion": {
                "titulo": "üí° Justificaci√≥n", 
                "instruccion": "Explica por qu√© es importante investigar",
                "requerida": True,
                "capitulo": False
            },
            "objetivos": {
                "titulo": "üéØ Objetivos", 
                "instruccion": "General y espec√≠ficos (verbos en infinitivo)",
                "requerida": True,
                "capitulo": False
            },
            "capitulo2": {
                "titulo": "üìö CAP√çTULO II - ESTADO DEL ARTE", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "marco_teorico": {
                "titulo": "üìñ Marco Te√≥rico", 
                "instruccion": "Base te√≥rica y antecedentes (USA CITAS)",
                "requerida": True,
                "capitulo": False
            },
            "capitulo3": {
                "titulo": "üî¨ CAP√çTULO III", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "metodologia": {
                "titulo": "‚öôÔ∏è Marco Metodol√≥gico", 
                "instruccion": "Tipo de estudio y t√©cnicas de recolecci√≥n",
                "requerida": True,
                "capitulo": False
            },
            "capitulo4": {
                "titulo": "üõ†Ô∏è CAP√çTULO IV - DESARROLLO", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "desarrollo": {
                "titulo": "‚öôÔ∏è Desarrollo", 
                "instruccion": "Proceso de investigaci√≥n paso a paso",
                "requerida": False,
                "capitulo": False
            },
            "capitulo5": {
                "titulo": "üìä CAP√çTULO V - AN√ÅLISIS DE DATOS", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "resultados": {
                "titulo": "üìä Resultados", 
                "instruccion": "Datos obtenidos (gr√°ficos, tablas)",
                "requerida": False,
                "capitulo": False
            },
            "analisis_datos": {
                "titulo": "üìà An√°lisis de Datos", 
                "instruccion": "Interpretaci√≥n de resultados",
                "requerida": False,
                "capitulo": False
            },
            "capitulo6": {
                "titulo": "üí¨ CAP√çTULO VI", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "discusion": {
                "titulo": "üí¨ Discusi√≥n", 
                "instruccion": "Confronta resultados con teor√≠a",
                "requerida": False,
                "capitulo": False
            },
            "conclusiones": {
                "titulo": "‚úÖ Conclusiones", 
                "instruccion": "Hallazgos principales y respuestas a objetivos",
                "requerida": True,
                "capitulo": False
            }
        }

    def ir_a_seccion_actual(self):
        """Navega a la secci√≥n actual en el contenido"""
        if hasattr(self, 'content_tabview'):
            current_tab = self.content_tabview.get()
            if current_tab:
                self.tabview.set("üìù Contenido Din√°mico")
                self.anunciar_estado(f"Navegando a secci√≥n: {current_tab}")

    def buscar_en_contenido(self):
        """Abre di√°logo de b√∫squeda en el contenido"""
        # Por implementar: di√°logo de b√∫squeda
        messagebox.showinfo("üîç Buscar", "Funci√≥n de b√∫squeda en desarrollo")
    # Agregar estos m√©todos a la clase ProyectoAcademicoGenerator en ui/main_window.py
    # ANTES del m√©todo run()

    # ========== M√âTODOS DE IMPORTACI√ìN/EXPORTACI√ìN ==========

    def importar_bibtex(self):
        """Importa referencias desde archivo BibTeX"""
        from tkinter import filedialog
        
        filename = filedialog.askopenfilename(
            title="Seleccionar archivo BibTeX",
            filetypes=[("Archivos BibTeX", "*.bib"), ("Todos los archivos", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    contenido_bibtex = f.read()
                
                # Parsear entradas BibTeX b√°sicas
                import re
                entradas = re.findall(r'@\w+\{[^}]+\}', contenido_bibtex, re.DOTALL)
                
                referencias_importadas = 0
                for entrada in entradas:
                    try:
                        # Extraer tipo
                        tipo_match = re.match(r'@(\w+)\{', entrada)
                        tipo = tipo_match.group(1) if tipo_match else 'Libro'
                        
                        # Extraer campos
                        ref_data = {'tipo': tipo}
                        
                        # Buscar autor
                        autor_match = re.search(r'author\s*=\s*["{]([^"}]+)["}]', entrada, re.IGNORECASE)
                        if autor_match:
                            ref_data['autor'] = autor_match.group(1).strip()
                        
                        # Buscar a√±o
                        year_match = re.search(r'year\s*=\s*["{]?(\d{4})["}]?', entrada, re.IGNORECASE)
                        if year_match:
                            ref_data['a√±o'] = year_match.group(1)
                        
                        # Buscar t√≠tulo
                        title_match = re.search(r'title\s*=\s*["{]([^"}]+)["}]', entrada, re.IGNORECASE)
                        if title_match:
                            ref_data['titulo'] = title_match.group(1).strip()
                        
                        # Buscar fuente (journal, publisher, etc.)
                        fuente_match = re.search(r'(?:journal|publisher|booktitle)\s*=\s*["{]([^"}]+)["}]', entrada, re.IGNORECASE)
                        if fuente_match:
                            ref_data['fuente'] = fuente_match.group(1).strip()
                        else:
                            ref_data['fuente'] = ''
                        
                        # Agregar si tiene los campos m√≠nimos
                        if all(key in ref_data for key in ['autor', 'a√±o', 'titulo']):
                            self.referencias.append(ref_data)
                            referencias_importadas += 1
                            
                    except Exception as e:
                        print(f"Error procesando entrada: {e}")
                        continue
                
                # Actualizar lista visual
                self.actualizar_lista_referencias()
                
                # Actualizar contador
                if hasattr(self, 'ref_stats_label'):
                    self.ref_stats_label.configure(text=f"Total: {len(self.referencias)} referencias")
                
                messagebox.showinfo("‚úÖ Importaci√≥n Exitosa", 
                    f"Se importaron {referencias_importadas} referencias desde el archivo BibTeX")
                    
            except Exception as e:
                messagebox.showerror("‚ùå Error", f"Error al importar archivo BibTeX:\n{str(e)}")

    def eliminar_referencias_seleccionadas(self):
        """Elimina las referencias seleccionadas"""
        # Por ahora, elimina la √∫ltima referencia
        if self.referencias:
            respuesta = messagebox.askyesno("üóëÔ∏è Confirmar", 
                "¬øEliminar la √∫ltima referencia agregada?")
            
            if respuesta:
                self.referencias.pop()
                self.actualizar_lista_referencias()
                
                # Actualizar contador
                if hasattr(self, 'ref_stats_label'):
                    self.ref_stats_label.configure(text=f"Total: {len(self.referencias)} referencias")
                
                messagebox.showinfo("‚úÖ Eliminada", "Referencia eliminada correctamente")
        else:
            messagebox.showwarning("‚ö†Ô∏è Sin referencias", "No hay referencias para eliminar")

    def exportar_referencias_apa(self):
        """Exporta las referencias en formato APA"""
        if not self.referencias:
            messagebox.showwarning("‚ö†Ô∏è Sin referencias", "No hay referencias para exportar")
            return
        
        from tkinter import filedialog
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Archivo de texto", "*.txt"), ("Todos los archivos", "*.*")],
            title="Exportar Referencias APA"
        )
        
        if filename:
            try:
                # Ordenar referencias por autor
                referencias_ordenadas = sorted(self.referencias, 
                                            key=lambda x: x['autor'].split(',')[0].strip())
                
                # Generar formato APA
                referencias_apa = []
                for ref in referencias_ordenadas:
                    apa_ref = self._formatear_referencia_apa_export(ref)
                    referencias_apa.append(apa_ref)
                
                # Escribir archivo
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("REFERENCIAS\n")
                    f.write("="*50 + "\n\n")
                    f.write("\n\n".join(referencias_apa))
                
                messagebox.showinfo("‚úÖ Exportado", 
                    f"Referencias exportadas exitosamente:\n{filename}")
                    
            except Exception as e:
                messagebox.showerror("‚ùå Error", f"Error al exportar referencias:\n{str(e)}")

    def _formatear_referencia_apa_export(self, ref):
        """Formatea una referencia individual para exportaci√≥n"""
        tipo = ref.get('tipo', 'Libro')
        autor = ref.get('autor', '')
        a√±o = ref.get('a√±o', '')
        titulo = ref.get('titulo', '')
        fuente = ref.get('fuente', '')
        
        if tipo == 'Libro':
            return f"{autor} ({a√±o}). {titulo}. {fuente}."
        elif tipo == 'Art√≠culo':
            return f"{autor} ({a√±o}). {titulo}. {fuente}."
        elif tipo == 'Web':
            return f"{autor} ({a√±o}). {titulo}. Recuperado de {fuente}"
        elif tipo == 'Tesis':
            return f"{autor} ({a√±o}). {titulo} [Tesis]. {fuente}."
        elif tipo == 'Conferencia':
            return f"{autor} ({a√±o}). {titulo}. Presentado en {fuente}."
        elif tipo == 'Informe':
            return f"{autor} ({a√±o}). {titulo}. {fuente}."
        else:
            return f"{autor} ({a√±o}). {titulo}. {fuente}."

    def filtrar_referencias(self, event=None):
        """Filtra las referencias seg√∫n el t√©rmino de b√∫squeda"""
        termino = self.ref_search.get().lower() if hasattr(self, 'ref_search') else ""
        
        # Limpiar lista actual
        for widget in self.ref_scroll_frame.winfo_children():
            widget.destroy()
        
        # Mostrar solo referencias que coincidan
        referencias_filtradas = []
        for ref in self.referencias:
            if (termino in ref['autor'].lower() or 
                termino in ref['titulo'].lower() or 
                termino in ref.get('fuente', '').lower() or
                termino in ref.get('a√±o', '')):
                referencias_filtradas.append(ref)
        
        # Recrear lista visual con referencias filtradas
        for i, ref in enumerate(referencias_filtradas):
            ref_item_frame = ctk.CTkFrame(self.ref_scroll_frame, fg_color="gray20", corner_radius=8)
            ref_item_frame.pack(fill="x", padx=5, pady=5)
            
            apa_ref = self._formatear_referencia_apa_export(ref)
            ref_label = ctk.CTkLabel(
                ref_item_frame, text=f"üìñ {apa_ref}", 
                font=ctk.CTkFont(size=11),
                wraplength=800, justify="left"
            )
            ref_label.pack(padx=15, pady=10, anchor="w")
            
            # Bot√≥n eliminar individual
            delete_btn = ctk.CTkButton(
                ref_item_frame, text="üóëÔ∏è", width=30, height=30,
                command=lambda idx=self.referencias.index(ref): self.eliminar_referencia_individual(idx),
                fg_color="red", hover_color="darkred"
            )
            delete_btn.pack(side="right", padx=10)
        
        # Mostrar mensaje si no hay coincidencias
        if not referencias_filtradas and termino:
            no_results_label = ctk.CTkLabel(
                self.ref_scroll_frame, 
                text="No se encontraron referencias que coincidan con la b√∫squeda",
                font=ctk.CTkFont(size=12),
                text_color="gray60"
            )
            no_results_label.pack(pady=20)

    def actualizar_opacidad_preview(self, value):
        """Actualiza el valor de opacidad de la marca de agua"""
        self.watermark_opacity = float(value)
        if hasattr(self, 'opacity_label'):
            self.opacity_label.configure(text=f"{int(self.watermark_opacity * 100)}%")

    def limpiar_validacion(self):
        """Limpia el √°rea de validaci√≥n"""
        if hasattr(self, 'validation_text'):
            self.validation_text.delete("1.0", "end")
            self.anunciar_estado("Panel de validaci√≥n limpiado")

    def mostrar_logs(self):
        """Muestra los logs del sistema"""
        logs = []
        logs.append("üìã LOGS DEL SISTEMA\n")
        logs.append("="*60 + "\n\n")
        
        from datetime import datetime
        
        # Log de inicio
        logs.append(f"[{datetime.now().strftime('%H:%M:%S')}] Sistema iniciado\n")
        logs.append(f"[{datetime.now().strftime('%H:%M:%S')}] Im√°genes base cargadas\n")
        
        # Logs de actividad
        if hasattr(self, 'project_manager') and hasattr(self.project_manager, 'last_save_time'):
            if self.project_manager.last_save_time:
                logs.append(f"[{self.project_manager.last_save_time.strftime('%H:%M:%S')}] Proyecto guardado\n")
        
        # Estado actual
        logs.append(f"\nüìä ESTADO ACTUAL:\n")
        logs.append(f"   ‚Ä¢ Secciones activas: {len(self.secciones_activas)}\n")
        logs.append(f"   ‚Ä¢ Referencias: {len(self.referencias)}\n")
        logs.append(f"   ‚Ä¢ Palabras totales: {self.stats.get('total_words', 0)}\n")
        
        self.validation_text.insert("1.0", ''.join(logs))

    def mostrar_sugerencias(self):
        """Muestra sugerencias inteligentes para mejorar el proyecto"""
        sugerencias = []
        sugerencias.append("üí° SUGERENCIAS INTELIGENTES\n")
        sugerencias.append("="*60 + "\n\n")
        
        # Analizar estado del proyecto
        palabras_totales = self.stats.get('total_words', 0)
        secciones_completas = self.stats.get('sections_completed', 0)
        referencias_total = len(self.referencias)
        
        # Sugerencias basadas en an√°lisis
        if palabras_totales < 1000:
            sugerencias.append("üìù CONTENIDO:\n")
            sugerencias.append("   ‚Ä¢ El proyecto tiene pocas palabras. Considera expandir las secciones principales.\n")
            sugerencias.append("   ‚Ä¢ Objetivo m√≠nimo recomendado: 3000-5000 palabras\n\n")
        
        if referencias_total < 5:
            sugerencias.append("üìö REFERENCIAS:\n")
            sugerencias.append("   ‚Ä¢ Agrega m√°s referencias bibliogr√°ficas (m√≠nimo 10-15 recomendadas)\n")
            sugerencias.append("   ‚Ä¢ Incluye fuentes variadas: libros, art√≠culos, sitios web confiables\n\n")
        
        # Verificar secciones cr√≠ticas
        secciones_vacias = []
        for seccion_id in self.secciones_activas:
            if seccion_id in self.secciones_disponibles and seccion_id in self.content_texts:
                seccion = self.secciones_disponibles[seccion_id]
                if seccion.get('requerida', False) and not seccion.get('capitulo', False):
                    content = self.content_texts[seccion_id].get("1.0", "end").strip()
                    if len(content) < 50:
                        secciones_vacias.append(seccion['titulo'])
        
        if secciones_vacias:
            sugerencias.append("‚ö†Ô∏è SECCIONES REQUERIDAS VAC√çAS:\n")
            for seccion in secciones_vacias:
                sugerencias.append(f"   ‚Ä¢ {seccion}\n")
            sugerencias.append("\n")
        
        # Sugerencias de formato
        sugerencias.append("üé® FORMATO Y ESTILO:\n")
        if self.formato_config.get('interlineado', 2.0) != 2.0:
            sugerencias.append("   ‚Ä¢ Considera usar interlineado doble (est√°ndar acad√©mico)\n")
        
        # Sugerencias de mejora
        sugerencias.append("\n‚ú® MEJORAS RECOMENDADAS:\n")
        sugerencias.append("   ‚Ä¢ Revisa la coherencia entre objetivos y conclusiones\n")
        sugerencias.append("   ‚Ä¢ Aseg√∫rate de citar todas las referencias en el texto\n")
        sugerencias.append("   ‚Ä¢ Incluye gr√°ficos o tablas si son relevantes\n")
        sugerencias.append("   ‚Ä¢ Verifica ortograf√≠a y gram√°tica antes de generar\n")
        
        self.validation_text.insert("1.0", ''.join(sugerencias))

    def cambiar_modo_preview(self, valor):
        """Cambia el modo de vista previa"""
        self.actualizar_preview()

    def generar_preview_formato(self):
        """Genera vista previa con formato aplicado"""
        preview = []
        preview.append("VISTA PREVIA CON FORMATO\n")
        preview.append("="*40 + "\n\n")
        
        # Mostrar configuraci√≥n actual
        preview.append("üìã FORMATO APLICADO:\n")
        preview.append(f"   ‚Ä¢ Fuente: {self.formato_config['fuente_texto']} {self.formato_config['tama√±o_texto']}pt\n")
        preview.append(f"   ‚Ä¢ T√≠tulos: {self.formato_config['fuente_titulo']} {self.formato_config['tama√±o_titulo']}pt\n")
        preview.append(f"   ‚Ä¢ Interlineado: {self.formato_config['interlineado']}\n")
        preview.append(f"   ‚Ä¢ M√°rgenes: {self.formato_config['margen']}cm\n")
        preview.append(f"   ‚Ä¢ Justificado: {'S√≠' if self.formato_config['justificado'] else 'No'}\n")
        preview.append(f"   ‚Ä¢ Sangr√≠a: {'S√≠' if self.formato_config['sangria'] else 'No'}\n\n")
        
        preview.append("-"*40 + "\n\n")
        
        # Ejemplo de texto formateado
        preview.append("INTRODUCCI√ìN\n\n")
        preview.append("     Este es un ejemplo de c√≥mo se ver√° el texto con el formato aplicado. ")
        preview.append("La primera l√≠nea de cada p√°rrafo tendr√° sangr√≠a si est√° activada. ")
        preview.append("El texto estar√° justificado para una apariencia profesional.\n\n")
        
        preview.append("     Un segundo p√°rrafo mostrar√≠a la consistencia del formato. ")
        preview.append("Las citas aparecer√≠an as√≠ (Garc√≠a, 2020) integradas en el texto.\n\n")
        
        return ''.join(preview)

    def ocultar_preview(self):
        """Oculta la ventana de vista previa en lugar de destruirla"""
        if hasattr(self, 'preview_window'):
            self.preview_window.withdraw()

    @property
    def documento_base(self):
        """Getter para documento_base"""
        if not hasattr(self, '_documento_base'):
            self._documento_base = None
        return self._documento_base

    @documento_base.setter
    def documento_base(self, value):
        """Setter para documento_base"""
        self._documento_base = value

    @property
    def contenido_guardado(self):
        """Getter para contenido_guardado"""
        if not hasattr(self, '_contenido_guardado'):
            self._contenido_guardado = {}
        return self._contenido_guardado

    @contenido_guardado.setter
    def contenido_guardado(self, value):
        """Setter para contenido_guardado"""
        self._contenido_guardado = value
    def run(self):
        """Ejecuta la aplicaci√≥n"""
        self.root.mainloop()

# Incluir aqu√≠ todos los m√©todos restantes necesarios que no se han movido a m√≥dulos separados
# [Agregar m√©todos como actualizar_lista_secciones, crear_pestanas_contenido, etc.]

    
    # M√©todos de secciones (coordinaci√≥n con UI)
    def actualizar_lista_secciones(self):
        """Actualiza la lista visual de secciones activas"""
        # Implementaci√≥n en contenido_dinamico_tab
        if hasattr(self, 'contenido_dinamico_tab'):
            # Delegar a la pesta√±a
            pass
    
    def crear_pestanas_contenido(self):
        """Crea las pesta√±as de contenido din√°micamente"""
        if hasattr(self, 'content_tabview'):
            # Guardar contenido actual antes de recrear
            contenido_temporal = {}
            for seccion_id, text_widget in self.content_texts.items():
                contenido_temporal[seccion_id] = text_widget.get("1.0", "end-1c")
            
            # Limpiar pesta√±as existentes
            for tab in list(self.content_tabview._tab_dict.keys()):
                self.content_tabview.delete(tab)
            
            # Limpiar diccionario de widgets
            self.content_texts.clear()
            
            # Crear nuevas pesta√±as seg√∫n secciones activas
            for seccion_id in self.secciones_activas:
                if seccion_id in self.secciones_disponibles:
                    seccion = self.secciones_disponibles[seccion_id]
                    
                    # No crear pesta√±a para cap√≠tulos (solo son t√≠tulos)
                    if not seccion.get('capitulo', False):
                        tab = self.content_tabview.add(seccion['titulo'])
                        self._crear_contenido_seccion(tab, seccion_id, seccion)
                        
                        # Restaurar contenido si exist√≠a
                        if seccion_id in contenido_temporal and seccion_id in self.content_texts:
                            self.content_texts[seccion_id].insert("1.0", contenido_temporal[seccion_id])
            
            # Actualizar breadcrumb si existe
            if hasattr(self, 'breadcrumb_label'):
                current_tab = self.content_tabview.get() if self.content_tabview._tab_dict else ""
                self.breadcrumb_label.configure(text=f"üìç Navegaci√≥n: {current_tab}")
    
    # M√©todos de gesti√≥n de secciones
    def agregar_seccion(self):
        """Agrega una nueva secci√≥n personalizada"""
        from .dialogs import SeccionDialog
        
        dialog = SeccionDialog(self.root, self.secciones_disponibles)
        self.root.wait_window(dialog.dialog)
        
        if dialog.result:
            seccion_id, seccion_data = dialog.result
            try:
                # Agregar a secciones disponibles
                self.secciones_disponibles[seccion_id] = seccion_data
                self.secciones_activas.append(seccion_id)
                
                # Actualizar UI
                self.actualizar_lista_secciones()
                self.crear_pestanas_contenido()
                messagebox.showinfo("‚úÖ Agregada", f"Secci√≥n '{seccion_data['titulo']}' agregada correctamente")
            except Exception as e:
                messagebox.showerror("‚ùå Error", str(e))
    
    def quitar_seccion(self):
        """Quita la secci√≥n seleccionada de las activas"""
        if hasattr(self, 'content_tabview') and self.content_tabview._tab_dict:
            current_tab = self.content_tabview.get()
            
            # Buscar el ID de la secci√≥n por el t√≠tulo
            seccion_id = None
            for sid, seccion in self.secciones_disponibles.items():
                if seccion['titulo'] == current_tab:
                    seccion_id = sid
                    break
            
            if seccion_id and seccion_id in self.secciones_activas:
                seccion = self.secciones_disponibles[seccion_id]
                
                # Verificar si es requerida
                if seccion.get('requerida', False):
                    messagebox.showwarning("‚ö†Ô∏è Secci√≥n Requerida", 
                        "Esta secci√≥n es requerida y no puede ser eliminada")
                    return
                
                # Confirmar eliminaci√≥n
                if messagebox.askyesno("üóëÔ∏è Confirmar", 
                    f"¬øDesactivar la secci√≥n '{seccion['titulo']}'?"):
                    self.secciones_activas.remove(seccion_id)
                    self.actualizar_lista_secciones()
                    self.crear_pestanas_contenido()
                    messagebox.showinfo("‚úÖ Desactivada", "Secci√≥n desactivada correctamente")

    def editar_seccion(self):
        """Edita la secci√≥n actual"""
        if hasattr(self, 'content_tabview') and self.content_tabview._tab_dict:
            current_tab = self.content_tabview.get()
            
            # Buscar el ID de la secci√≥n
            seccion_id = None
            for sid, seccion in self.secciones_disponibles.items():
                if seccion['titulo'] == current_tab:
                    seccion_id = sid
                    break
            
            if seccion_id:
                from .dialogs import SeccionDialog
                
                dialog = SeccionDialog(
                    self.root, 
                    self.secciones_disponibles,
                    editar=True,
                    seccion_actual=(seccion_id, self.secciones_disponibles[seccion_id])
                )
                
                self.root.wait_window(dialog.dialog)
                
                if dialog.result:
                    _, seccion_data = dialog.result
                    self.secciones_disponibles[seccion_id].update(seccion_data)
                    self.actualizar_lista_secciones()
                    self.crear_pestanas_contenido()
                    messagebox.showinfo("‚úÖ Actualizada", "Secci√≥n actualizada correctamente")

    def subir_seccion(self):
        """Sube la secci√≥n actual en el orden"""
        if hasattr(self, 'content_tabview') and self.content_tabview._tab_dict:
            current_tab = self.content_tabview.get()
            
            # Buscar el ID de la secci√≥n
            for seccion_id, seccion in self.secciones_disponibles.items():
                if seccion['titulo'] == current_tab:
                    if seccion_id in self.secciones_activas:
                        index = self.secciones_activas.index(seccion_id)
                        if index > 0:
                            # Intercambiar con la anterior
                            self.secciones_activas[index], self.secciones_activas[index-1] = \
                                self.secciones_activas[index-1], self.secciones_activas[index]
                            self.actualizar_lista_secciones()
                            self.crear_pestanas_contenido()
                            # Mantener la pesta√±a actual seleccionada
                            self.content_tabview.set(current_tab)
                    break

    def bajar_seccion(self):
        """Baja la secci√≥n actual en el orden"""
        if hasattr(self, 'content_tabview') and self.content_tabview._tab_dict:
            current_tab = self.content_tabview.get()
            
            # Buscar el ID de la secci√≥n
            for seccion_id, seccion in self.secciones_disponibles.items():
                if seccion['titulo'] == current_tab:
                    if seccion_id in self.secciones_activas:
                        index = self.secciones_activas.index(seccion_id)
                        if index < len(self.secciones_activas) - 1:
                            # Intercambiar con la siguiente
                            self.secciones_activas[index], self.secciones_activas[index+1] = \
                                self.secciones_activas[index+1], self.secciones_activas[index]
                            self.actualizar_lista_secciones()
                            self.crear_pestanas_contenido()
                            # Mantener la pesta√±a actual seleccionada
                            self.content_tabview.set(current_tab)
                    break
    def agregar_referencia(self):
        """Versi√≥n actualizada usando state manager"""
        # Recopilar datos del formulario
        if all([
            hasattr(self, 'ref_tipo'),
            hasattr(self, 'ref_autor'),
            hasattr(self, 'ref_a√±o'),
            hasattr(self, 'ref_titulo'),
            hasattr(self, 'ref_fuente')
        ]):
            ref_data = {
                'tipo': self.ref_tipo.get(),
                'autor': self.ref_autor.get().strip(),
                'a√±o': self.ref_a√±o.get().strip(),
                'titulo': self.ref_titulo.get().strip(),
                'fuente': self.ref_fuente.get().strip()
            }
            
            try:
                # Usar el reference_manager para validar
                ref_validada = self.reference_manager.agregar_referencia(ref_data)
                
                # Actualizar estado global
                state_manager.add_referencia(ref_validada)
                
                # Actualizar UI local
                self.referencias = state_manager.get_state().referencias
                self.actualizar_lista_referencias()
                
                # Limpiar campos
                self.ref_autor.delete(0, "end")
                self.ref_a√±o.delete(0, "end")
                self.ref_titulo.delete(0, "end")
                self.ref_fuente.delete(0, "end")
                
                messagebox.showinfo("‚úÖ Agregada", "Referencia agregada correctamente")
                
            except ValueError as e:
                messagebox.showerror("‚ùå Error", str(e))
    
    def actualizar_lista_referencias(self):
        """Actualiza la lista visual de referencias"""
        # Implementaci√≥n b√°sica
        pass
    
    # M√©todos de formato
    def toggle_formato_base(self):
        """Activa/desactiva el uso del formato base"""
        if self.usar_base_var.get():
            if self.documento_base is None:
                self.cargar_documento_base()
            else:
                self.aplicar_formato_base()
        else:
            self.limpiar_formato_base()
    
    def aplicar_formato_base(self):
        """Aplica los datos del formato base"""
        if self.documento_base:
            for key, value in self.documento_base.items():
                if key in self.proyecto_data:
                    self.proyecto_data[key].delete(0, "end")
                    self.proyecto_data[key].insert(0, value)
            
            messagebox.showinfo("‚úÖ Aplicado", "Formato base aplicado correctamente")
    
    def limpiar_formato_base(self):
        """Limpia los datos del formato base"""
        campos_base = ['institucion', 'ciclo', 'curso', 'enfasis', 'director']
        for campo in campos_base:
            if campo in self.proyecto_data:
                self.proyecto_data[campo].delete(0, "end")
    
    def aplicar_formato(self):
        """Aplica la configuraci√≥n de formato"""
        self.formato_config = {
            'fuente_texto': self.fuente_texto.get(),
            'tama√±o_texto': int(self.tama√±o_texto.get()),
            'fuente_titulo': self.fuente_titulo.get(),
            'tama√±o_titulo': int(self.tama√±o_titulo.get()),
            'interlineado': float(self.interlineado.get()),
            'margen': float(self.margen.get()),
            'justificado': self.justificado_var.get(),
            'sangria': self.sangria_var.get()
        }
        
        messagebox.showinfo("‚úÖ Aplicado", "Configuraci√≥n de formato aplicada correctamente")
    
